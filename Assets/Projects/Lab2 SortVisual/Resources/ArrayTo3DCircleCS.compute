#include <UnityCG.cginc>
#pragma kernel CSMain

float3 origin;
float rotate_scale;
float distant_scale;
int array_len;
StructuredBuffer<int> sorted_array;
RWTexture1D<float4> render_texture;

void Unity_RotateAboutAxis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
{
    float s = sin(Rotation);
    float c = cos(Rotation);
    float one_minus_c = 1.0 - c;

    Axis = normalize(Axis);
    float3x3 rot_mat =
    {one_minus_c * Axis.x * Axis.x + c, one_minus_c * Axis.x * Axis.y - Axis.z * s, one_minus_c * Axis.z * Axis.x + Axis.y * s,
     one_minus_c * Axis.x * Axis.y + Axis.z * s, one_minus_c * Axis.y * Axis.y + c, one_minus_c * Axis.y * Axis.z - Axis.x * s,
     one_minus_c * Axis.z * Axis.x - Axis.y * s, one_minus_c * Axis.y * Axis.z + Axis.x * s, one_minus_c * Axis.z * Axis.z + c
    };
    Out = mul(rot_mat, In);
}

[numthreads(1024,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int i = id.x;
    if (!(i < array_len))return;
    float rotation_num = i * rotate_scale;
    float distance_num = sorted_array[i] * distant_scale;
    float3 origin_to_point = float3(0, 0, 1);
    Unity_RotateAboutAxis_Radians_float(origin_to_point, float3(0, 1, 0), rotation_num, origin_to_point);
    Unity_RotateAboutAxis_Radians_float(origin_to_point, float3(0, 0, 1), rotation_num, origin_to_point);
    origin_to_point = normalize(origin_to_point) * distance_num;
    render_texture[i] = float4(origin + origin_to_point, 1);
}
