#include <UnityCG.cginc>
#pragma kernel CSMain
const float C = 0.57721566490153286060651209;

float3 origin;
float rotate_scale;
float distant_scale;
int array_len;
bool type1;
StructuredBuffer<float> sorted_array;
RWTexture2D<float4> render_texture;
// RWStructuredBuffer<float4> test_buffer;

void Unity_RotateAboutAxis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
{
    float s = sin(Rotation);
    float c = cos(Rotation);
    float one_minus_c = 1.0 - c;

    Axis = normalize(Axis);
    float3x3 rot_mat =
    {one_minus_c * Axis.x * Axis.x + c, one_minus_c * Axis.x * Axis.y - Axis.z * s, one_minus_c * Axis.z * Axis.x + Axis.y * s,
     one_minus_c * Axis.x * Axis.y + Axis.z * s, one_minus_c * Axis.y * Axis.y + c, one_minus_c * Axis.y * Axis.z - Axis.x * s,
     one_minus_c * Axis.z * Axis.x - Axis.y * s, one_minus_c * Axis.y * Axis.z + Axis.x * s, one_minus_c * Axis.z * Axis.z + c
    };
    Out = mul(rot_mat, In);
}


float harmonic_progression_approximation(int i)
{
    return log(i) + C;
}

[numthreads(1024,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int i = id.x;
    if (!(i < array_len))return;

    float point_value = sorted_array[i];

    float rotation_num, distance_num;

    if (type1)
    {
        distance_num = i * distant_scale;
        rotation_num = point_value * rotate_scale / distance_num;
    }
    else
    {
        distance_num = point_value * distant_scale;
        rotation_num = rotate_scale / distant_scale * harmonic_progression_approximation(i);
    }

    float3 origin_to_point = float3(0, 0, 1);
    float3 axis = float3(0, 1, 0);
    Unity_RotateAboutAxis_Radians_float(axis, float3(0, 0, -1), rotation_num, axis);
    Unity_RotateAboutAxis_Radians_float(origin_to_point, axis, rotation_num * 32, origin_to_point);
    origin_to_point = normalize(origin_to_point) * distance_num;
    render_texture[uint2(point_value, 0)] = float4(origin + origin_to_point, 1);
    // test_buffer[i] = float4(origin + origin_to_point, 1);
    // test_buffer[i] = float4(i, 0, 0, 0);
}
